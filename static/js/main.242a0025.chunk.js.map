{"version":3,"sources":["app-components/weather.component.jsx","app-components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmax","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","icon","Thunderstorm","get_WeatherIcon","id","state","undefined","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","Icon","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.242a0025.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather=(props) =>{\r\n    return (\r\n           <div className=\"container\">\r\n                <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}/>\r\n                </h5>\r\n               {props.temp_celsius ?  (<h1 className=\"py-0\">{props.temp_celsius}&deg;</h1>):null}\r\n                {minmax(props.temp_min,props.temp_max)}\r\n    <h4 className=\"py-3\">{props.description}</h4>\r\n                </div>\r\n\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction minmax(min,max){\r\n    if(min && max)\r\n    {\r\n        return(\r\n            <h3 >\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    \r\n    }    \r\n}\r\nexport default  Weather;\r\n","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n          <div >{props.error ? error():null }</div>\r\n            <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" \r\n                    autoComplete=\"off\" placeholder=\"Enter City..\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" className=\"form-control\" name=\"country\" \r\n                autoComplete=\"off\" placeholder=\"Enter Country..\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div> \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n   <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please enter city and country...\r\n    </div>\r\n     \r\n\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\nimport \"weather-icons/css/weather-icons.css\";\nimport Weather from './app-components/weather.component';\nimport Form from './app-components/form.component';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\n//api call :api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_Key=\"34b60dc72ca225ca0326be924006efc6\";\n\n\nclass App extends React.Component\n{\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       city:undefined,\n       country:undefined,\n       icon:undefined,\n       main:undefined,\n       celsius:undefined,\n       temp_max:undefined,\n       temp_min:undefined,\n       description:\"\",\n       error:false\n    }\n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n\n    };\n  }\n\n  calCelsius(temp)\n  {\n    let cell=Math.floor(temp-273.15)\n    return cell;\n  }\n  get_WeatherIcon(Icon,rangeId)\n{\n  switch(true)\n  {\n    case rangeId>=200 && rangeId<=232:\n      this.setState({icon:this.weatherIcon.Thunderstorm})\n      break;\n    case rangeId>=300 && rangeId<=321:\n      this.setState({icon:this.weatherIcon.Drizzle})\n      break;\n    case rangeId>=500 && rangeId<=531:\n      this.setState({icon:this.weatherIcon.Rain})\n      break;\n    case rangeId>=600 && rangeId<=622:\n      this.setState({icon:this.weatherIcon.Snow})\n      break;\n    case rangeId>=701 && rangeId<=781:\n      this.setState({icon:this.weatherIcon.Atmosphere})\n      break;\n    case rangeId=800:\n        this.setState({icon:this.weatherIcon.Clear})\n        break;\n     case rangeId>=801 && rangeId<=804:\n          this.setState({icon:this.weatherIcon.Clouds})\n          break;\n      default:\n        this.setState({icon:this.weatherIcon.Clear})\n  }\n}\n  getWeather= async (e)=>{\n    e.preventDefault();\n\n      \n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    if(city && country)\n   {\n    \n    const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n    const response =await api_call.json();\n\n    console.log(response);\n\n    this.setState({\n      city:`${response.name},${response.sys.country}`, \n      celsius:this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      icon:this.weatherIcon.Thunderstorm,\n\n\n    });\n\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  \n  }\n  else{\n    this.setState({error:true});\n      }\n  }\n\n  render()\n  {\n    return(\n    <div className=\"App\">\n      <h1><ul>Plan Your Day....</ul></h1>\n     <Form loadWeather={this.getWeather} error={this.state.error}/>\n    <Weather city={this.state.city} country={this.state.country} temp_celsius={this.state.celsius}\n    temp_min={this.state.temp_min} temp_max={this.state.temp_max} description={this.state.description}\n    weatherIcon={this.state.icon}\n    />\n   \n  </div>);\n  }\n\n}\n\n\nexport default App;\n //<Form loadWeather={this.getWeather} error={this.state.error}/>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}